# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Channel implements Node {
  id: ID!
  title: String!
  statements(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Statement!]
}

type Statement implements Node {
  id: ID!
  createdAt: DateTime!
  postedBy(where: UserWhereInput): User
  userId: ID!
  channelId: ID!
  text: String!
}

type User implements Node {
  id: ID!
  nickname: String!
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel!]
  statements(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Statement!]
}


#
# Other Types
#

type AggregateChannel {
  count: Int!
}

type AggregateStatement {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """
  The number of nodes that have been affected by the Batch operation.
  """
  count: Long!
}

"""
A connection to a list of items.
"""
type ChannelConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [ChannelEdge]!
  aggregate: AggregateChannel!
}

input ChannelCreateInput {
  title: String!
  statements: StatementCreateManyInput
}

input ChannelCreateManyInput {
  create: [ChannelCreateInput!]
  connect: [ChannelWhereUniqueInput!]
}

"""
An edge in a connection.
"""
type ChannelEdge {
  """
  The item at the end of the edge.
  """
  node: Channel!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum ChannelOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ChannelPreviousValues {
  id: ID!
  title: String!
}

type ChannelSubscriptionPayload {
  mutation: MutationType!
  node: Channel
  updatedFields: [String!]
  previousValues: ChannelPreviousValues
}

input ChannelSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChannelSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChannelSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ChannelWhereInput
}

input ChannelUpdateDataInput {
  title: String
  statements: StatementUpdateManyInput
}

input ChannelUpdateInput {
  title: String
  statements: StatementUpdateManyInput
}

input ChannelUpdateManyInput {
  create: [ChannelCreateInput!]
  connect: [ChannelWhereUniqueInput!]
  disconnect: [ChannelWhereUniqueInput!]
  delete: [ChannelWhereUniqueInput!]
  update: [ChannelUpdateNestedInput!]
  upsert: [ChannelUpsertNestedInput!]
}

input ChannelUpdateNestedInput {
  where: ChannelWhereUniqueInput!
  data: ChannelUpdateDataInput!
}

input ChannelUpsertNestedInput {
  where: ChannelWhereUniqueInput!
  update: ChannelUpdateDataInput!
  create: ChannelCreateInput!
}

input ChannelWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [ChannelWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [ChannelWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  title: String
  """
  All values that are not equal to given value.
  """
  title_not: String
  """
  All values that are contained in given list.
  """
  title_in: [String!]
  """
  All values that are not contained in given list.
  """
  title_not_in: [String!]
  """
  All values less than the given value.
  """
  title_lt: String
  """
  All values less than or equal the given value.
  """
  title_lte: String
  """
  All values greater than the given value.
  """
  title_gt: String
  """
  All values greater than or equal the given value.
  """
  title_gte: String
  """
  All values containing the given string.
  """
  title_contains: String
  """
  All values not containing the given string.
  """
  title_not_contains: String
  """
  All values starting with the given string.
  """
  title_starts_with: String
  """
  All values not starting with the given string.
  """
  title_not_starts_with: String
  """
  All values ending with the given string.
  """
  title_ends_with: String
  """
  All values not ending with the given string.
  """
  title_not_ends_with: String
  statements_every: StatementWhereInput
  statements_some: StatementWhereInput
  statements_none: StatementWhereInput
}

input ChannelWhereUniqueInput {
  id: ID
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createChannel(data: ChannelCreateInput!): Channel!
  createStatement(data: StatementCreateInput!): Statement!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateChannel(data: ChannelUpdateInput!, where: ChannelWhereUniqueInput!): Channel
  updateStatement(data: StatementUpdateInput!, where: StatementWhereUniqueInput!): Statement
  deleteUser(where: UserWhereUniqueInput!): User
  deleteChannel(where: ChannelWhereUniqueInput!): Channel
  deleteStatement(where: StatementWhereUniqueInput!): Statement
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertChannel(where: ChannelWhereUniqueInput!, create: ChannelCreateInput!, update: ChannelUpdateInput!): Channel!
  upsertStatement(where: StatementWhereUniqueInput!, create: StatementCreateInput!, update: StatementUpdateInput!): Statement!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyChannels(data: ChannelUpdateInput!, where: ChannelWhereInput!): BatchPayload!
  updateManyStatements(data: StatementUpdateInput!, where: StatementWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyChannels(where: ChannelWhereInput!): BatchPayload!
  deleteManyStatements(where: StatementWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""
An object with an ID
"""
interface Node {
  """
  The id of the object.
  """
  id: ID!
}

"""
Information about pagination in a connection.
"""
type PageInfo {
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  channels(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Channel]!
  statements(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Statement]!
  user(where: UserWhereUniqueInput!): User
  channel(where: ChannelWhereUniqueInput!): Channel
  statement(where: StatementWhereUniqueInput!): Statement
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  channelsConnection(where: ChannelWhereInput, orderBy: ChannelOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ChannelConnection!
  statementsConnection(where: StatementWhereInput, orderBy: StatementOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): StatementConnection!
  """
  Fetches an object given its ID
  """
  node("""
  The ID of an object
  """
  id: ID!): Node
}

"""
A connection to a list of items.
"""
type StatementConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [StatementEdge]!
  aggregate: AggregateStatement!
}

input StatementCreateInput {
  userId: ID!
  channelId: ID!
  text: String!
  postedBy: UserCreateOneWithoutStatementsInput
}

input StatementCreateManyInput {
  create: [StatementCreateInput!]
  connect: [StatementWhereUniqueInput!]
}

input StatementCreateManyWithoutPostedByInput {
  create: [StatementCreateWithoutPostedByInput!]
  connect: [StatementWhereUniqueInput!]
}

input StatementCreateWithoutPostedByInput {
  userId: ID!
  channelId: ID!
  text: String!
}

"""
An edge in a connection.
"""
type StatementEdge {
  """
  The item at the end of the edge.
  """
  node: Statement!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum StatementOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  userId_ASC
  userId_DESC
  channelId_ASC
  channelId_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type StatementPreviousValues {
  id: ID!
  createdAt: DateTime!
  userId: ID!
  channelId: ID!
  text: String!
}

type StatementSubscriptionPayload {
  mutation: MutationType!
  node: Statement
  updatedFields: [String!]
  previousValues: StatementPreviousValues
}

input StatementSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StatementSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [StatementSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: StatementWhereInput
}

input StatementUpdateDataInput {
  userId: ID
  channelId: ID
  text: String
  postedBy: UserUpdateOneWithoutStatementsInput
}

input StatementUpdateInput {
  userId: ID
  channelId: ID
  text: String
  postedBy: UserUpdateOneWithoutStatementsInput
}

input StatementUpdateManyInput {
  create: [StatementCreateInput!]
  connect: [StatementWhereUniqueInput!]
  disconnect: [StatementWhereUniqueInput!]
  delete: [StatementWhereUniqueInput!]
  update: [StatementUpdateNestedInput!]
  upsert: [StatementUpsertNestedInput!]
}

input StatementUpdateManyWithoutPostedByInput {
  create: [StatementCreateWithoutPostedByInput!]
  connect: [StatementWhereUniqueInput!]
  disconnect: [StatementWhereUniqueInput!]
  delete: [StatementWhereUniqueInput!]
  update: [StatementUpdateWithoutPostedByInput!]
  upsert: [StatementUpsertWithoutPostedByInput!]
}

input StatementUpdateNestedInput {
  where: StatementWhereUniqueInput!
  data: StatementUpdateDataInput!
}

input StatementUpdateWithoutPostedByDataInput {
  userId: ID
  channelId: ID
  text: String
}

input StatementUpdateWithoutPostedByInput {
  where: StatementWhereUniqueInput!
  data: StatementUpdateWithoutPostedByDataInput!
}

input StatementUpsertNestedInput {
  where: StatementWhereUniqueInput!
  update: StatementUpdateDataInput!
  create: StatementCreateInput!
}

input StatementUpsertWithoutPostedByInput {
  where: StatementWhereUniqueInput!
  update: StatementUpdateWithoutPostedByDataInput!
  create: StatementCreateWithoutPostedByInput!
}

input StatementWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [StatementWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [StatementWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  createdAt: DateTime
  """
  All values that are not equal to given value.
  """
  createdAt_not: DateTime
  """
  All values that are contained in given list.
  """
  createdAt_in: [DateTime!]
  """
  All values that are not contained in given list.
  """
  createdAt_not_in: [DateTime!]
  """
  All values less than the given value.
  """
  createdAt_lt: DateTime
  """
  All values less than or equal the given value.
  """
  createdAt_lte: DateTime
  """
  All values greater than the given value.
  """
  createdAt_gt: DateTime
  """
  All values greater than or equal the given value.
  """
  createdAt_gte: DateTime
  userId: ID
  """
  All values that are not equal to given value.
  """
  userId_not: ID
  """
  All values that are contained in given list.
  """
  userId_in: [ID!]
  """
  All values that are not contained in given list.
  """
  userId_not_in: [ID!]
  """
  All values less than the given value.
  """
  userId_lt: ID
  """
  All values less than or equal the given value.
  """
  userId_lte: ID
  """
  All values greater than the given value.
  """
  userId_gt: ID
  """
  All values greater than or equal the given value.
  """
  userId_gte: ID
  """
  All values containing the given string.
  """
  userId_contains: ID
  """
  All values not containing the given string.
  """
  userId_not_contains: ID
  """
  All values starting with the given string.
  """
  userId_starts_with: ID
  """
  All values not starting with the given string.
  """
  userId_not_starts_with: ID
  """
  All values ending with the given string.
  """
  userId_ends_with: ID
  """
  All values not ending with the given string.
  """
  userId_not_ends_with: ID
  channelId: ID
  """
  All values that are not equal to given value.
  """
  channelId_not: ID
  """
  All values that are contained in given list.
  """
  channelId_in: [ID!]
  """
  All values that are not contained in given list.
  """
  channelId_not_in: [ID!]
  """
  All values less than the given value.
  """
  channelId_lt: ID
  """
  All values less than or equal the given value.
  """
  channelId_lte: ID
  """
  All values greater than the given value.
  """
  channelId_gt: ID
  """
  All values greater than or equal the given value.
  """
  channelId_gte: ID
  """
  All values containing the given string.
  """
  channelId_contains: ID
  """
  All values not containing the given string.
  """
  channelId_not_contains: ID
  """
  All values starting with the given string.
  """
  channelId_starts_with: ID
  """
  All values not starting with the given string.
  """
  channelId_not_starts_with: ID
  """
  All values ending with the given string.
  """
  channelId_ends_with: ID
  """
  All values not ending with the given string.
  """
  channelId_not_ends_with: ID
  text: String
  """
  All values that are not equal to given value.
  """
  text_not: String
  """
  All values that are contained in given list.
  """
  text_in: [String!]
  """
  All values that are not contained in given list.
  """
  text_not_in: [String!]
  """
  All values less than the given value.
  """
  text_lt: String
  """
  All values less than or equal the given value.
  """
  text_lte: String
  """
  All values greater than the given value.
  """
  text_gt: String
  """
  All values greater than or equal the given value.
  """
  text_gte: String
  """
  All values containing the given string.
  """
  text_contains: String
  """
  All values not containing the given string.
  """
  text_not_contains: String
  """
  All values starting with the given string.
  """
  text_starts_with: String
  """
  All values not starting with the given string.
  """
  text_not_starts_with: String
  """
  All values ending with the given string.
  """
  text_ends_with: String
  """
  All values not ending with the given string.
  """
  text_not_ends_with: String
  postedBy: UserWhereInput
}

input StatementWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  channel(where: ChannelSubscriptionWhereInput): ChannelSubscriptionPayload
  statement(where: StatementSubscriptionWhereInput): StatementSubscriptionPayload
}

"""
A connection to a list of items.
"""
type UserConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  nickname: String!
  channels: ChannelCreateManyInput
  statements: StatementCreateManyWithoutPostedByInput
}

input UserCreateOneWithoutStatementsInput {
  create: UserCreateWithoutStatementsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutStatementsInput {
  nickname: String!
  channels: ChannelCreateManyInput
}

"""
An edge in a connection.
"""
type UserEdge {
  """
  The item at the end of the edge.
  """
  node: User!
  """
  A cursor for use in pagination.
  """
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  nickname_ASC
  nickname_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  nickname: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserSubscriptionWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserSubscriptionWhereInput!]
  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]
  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String
  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]
  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  nickname: String
  channels: ChannelUpdateManyInput
  statements: StatementUpdateManyWithoutPostedByInput
}

input UserUpdateOneWithoutStatementsInput {
  create: UserCreateWithoutStatementsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutStatementsInput
  upsert: UserUpsertWithoutStatementsInput
}

input UserUpdateWithoutStatementsDataInput {
  nickname: String
  channels: ChannelUpdateManyInput
}

input UserUpdateWithoutStatementsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutStatementsDataInput!
}

input UserUpsertWithoutStatementsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutStatementsDataInput!
  create: UserCreateWithoutStatementsInput!
}

input UserWhereInput {
  """
  Logical AND on all given filters.
  """
  AND: [UserWhereInput!]
  """
  Logical OR on all given filters.
  """
  OR: [UserWhereInput!]
  id: ID
  """
  All values that are not equal to given value.
  """
  id_not: ID
  """
  All values that are contained in given list.
  """
  id_in: [ID!]
  """
  All values that are not contained in given list.
  """
  id_not_in: [ID!]
  """
  All values less than the given value.
  """
  id_lt: ID
  """
  All values less than or equal the given value.
  """
  id_lte: ID
  """
  All values greater than the given value.
  """
  id_gt: ID
  """
  All values greater than or equal the given value.
  """
  id_gte: ID
  """
  All values containing the given string.
  """
  id_contains: ID
  """
  All values not containing the given string.
  """
  id_not_contains: ID
  """
  All values starting with the given string.
  """
  id_starts_with: ID
  """
  All values not starting with the given string.
  """
  id_not_starts_with: ID
  """
  All values ending with the given string.
  """
  id_ends_with: ID
  """
  All values not ending with the given string.
  """
  id_not_ends_with: ID
  nickname: String
  """
  All values that are not equal to given value.
  """
  nickname_not: String
  """
  All values that are contained in given list.
  """
  nickname_in: [String!]
  """
  All values that are not contained in given list.
  """
  nickname_not_in: [String!]
  """
  All values less than the given value.
  """
  nickname_lt: String
  """
  All values less than or equal the given value.
  """
  nickname_lte: String
  """
  All values greater than the given value.
  """
  nickname_gt: String
  """
  All values greater than or equal the given value.
  """
  nickname_gte: String
  """
  All values containing the given string.
  """
  nickname_contains: String
  """
  All values not containing the given string.
  """
  nickname_not_contains: String
  """
  All values starting with the given string.
  """
  nickname_starts_with: String
  """
  All values not starting with the given string.
  """
  nickname_not_starts_with: String
  """
  All values ending with the given string.
  """
  nickname_ends_with: String
  """
  All values not ending with the given string.
  """
  nickname_not_ends_with: String
  channels_every: ChannelWhereInput
  channels_some: ChannelWhereInput
  channels_none: ChannelWhereInput
  statements_every: StatementWhereInput
  statements_some: StatementWhereInput
  statements_none: StatementWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
